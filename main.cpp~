/* Main */
#include "Clase.h"
#include "DtClase.h"
#include "Entrenamiento.h"
#include "DtEntrenamiento.h"
#include "Spinning.h"
#include "DtSpinning.h"
#include "Socio.h"
#include "DtSocio.h"
#include "Fecha.h"
#include "Inscripcion.h"
#include <iostream>
#include <cstring>
#include <string.h>
#include <stdexcept>

using namespace std;

#define MAX_CLASES 20
#define MAX_SOCIOS 50
	
	Clase * clases[MAX_CLASES];
	Socio * socios[MAX_SOCIOS];

	int tope_clases = 0;
	int tope_socios = 0;

	void agregarSocio (string ci, string nombre) 
	{
		int i = 0;
		if (tope_socios < MAX_SOCIOS) {
            while ((i <= tope_socios) && (socios[i]->getNombre() != nombre)) {
                i++;
            }    

			if (i <= tope_socios) {
                throw std::invalid_argument("Ya existe el socio");
			} else {
		 		Socio *socio = new Socio(ci, nombre);
		 		socios[tope_socios] = socio;
		 		tope_socios++;
			}
		} else {
			throw std::invalid_argument("No hay mas lugar disponible");
		}
	}

	void agregarClase(DtClase& clase) {
		/* Diferenciar si la variable clases es de DtSpinning o de DtEntrenamiento */
		int i = 0;
		if (tope_clases < MAX_CLASES) {
			while ((i <= tope_clases) && (clases[i]->getid()!=clase.getid())) {
				i++;
			}	
			if (i <= tope_clases) {
				throw std::invalid_argument("Ya existe la clase");
			} else {
				if (dynamic_cast<DtEntrenamiento*> (&clase) != NULL){ 
					//Entrenamiento
                                        DtEntrenamiento * aux = dynamic_cast<DtEntrenamiento*> (&clase);
					Entrenamiento * entrenamiento = new Entrenamiento(aux->getenRambla(), aux->getid(), aux->getNombre(), aux->getTurno());
                                        clases[tope_clases] = entrenamiento;
				} else {
					//Spinning
                                        DtSpinning * aux = dynamic_cast<DtSpinning*> (&clase);
                                        Spinning *spinning = new Spinning(aux->getCantBicicletas(), aux->getid(), aux->getNombre(), aux->getTurno());
                                        clases[tope_clases] = spinning;           
		 		}
                tope_clases++;
			}
		} else {
			throw std::invalid_argument("No hay mas clases disponible");
		}
	}


    void agregarInscripcion(string ciSocio, int idClase, Fecha fecha){
        int i=0;
        //se busca la clase donde se debe inscribir al socio
        while((i<tope_clases)&&(clases[i]->getid()!=idClase))
            i++;
        
        if (i>tope_clases)
            
            throw std::invalid_argument("No existe la clase");
        
        else if (clases[i]->cupo() == 0)
            
            throw std::invalid_argument("No hay cupos");
        
        else {
            
            int cantidad = clases[i]->getCantInscriptos();
            Inscripcion **inscriptos=clases[i]->getInscriptos();
  
            int j=0;
            while ((j<cantidad)&&(inscriptos[j]->getSocio()->getCI()!=ciSocio))
                j++;
        
            if (j<cantidad)
                throw std::invalid_argument("Ya est치 inscripto");
            else{
                
               int z = 0;
               while(socios[z]->getCI() != ciSocio)
                   z++;
               
               Inscripcion * ins = new Inscripcion(&fecha,socios[z]);
               
               inscriptos[j] = ins;
               
               clases[i]->setInscriptos(cantidad + 1);
               clases[i]->setInscripciones(inscriptos);
            }
        }
    }
        
        void borrarInscripcion(string ciSocio, int idClase){
            int i=0;
            while ((i<tope_clases)&&(clases[i]->getid()!=idClase))
                i++;
            if (i>tope_clases)
                throw std::invalid_argument("La clase no existe");
            else{
                //busco la inscripci칩n
                Inscripcion **inscriptos = clases[i]->getInscriptos();
                int cantidad = clases[i]->getCantInscriptos();
                
                int j=0;
                while ((j<cantidad)&&(inscriptos[j]->getSocio()->getCI()!=ciSocio)){
                    j++;
                }
                
                if (j>cantidad)
                        throw std::invalid_argument("No hay inscriptos");
                else{
                        inscriptos[j]=inscriptos[cantidad-1];
                        clases[i]->setInscriptos(cantidad-1);
                }

            }
        }
        
        DtSocio** obtenerInfoSocioPorClase(int idClase,int& cantSocios){
            
                int i=0;
                while ((i<tope_clases)&&(clases[i]->getid()!=idClase))
                        i++;
                DtSocio ** infoSocio = new DtSocio*[cantSocios];
                if (i<tope_clases){
                    Inscripcion **inscriptos=clases[i]->getInscriptos();
                    for(int j=0; j<cantSocios;j++)
                        infoSocio[j]=new DtSocio(inscriptos[j]->getSocio()->getCI(),inscriptos[j]->getSocio()->getNombre());

                }
                return infoSocio;
        }
        
        DtClase& obtenerClase(int idClase){
	     //se asume que debe existir la clase del id correspondiente
                    DtClase * resultado;
	            int j=0;
	            while((j<=tope_clases)&&(clases[j]->getid()!=idClase))
		            j++;
                    
	            if (j<tope_clases){ //control de error
                        if(dynamic_cast<Entrenamiento *>(clases[j]) != NULL){
                            Entrenamiento  * entr = dynamic_cast<Entrenamiento *>(clases[j]);
	                    DtEntrenamiento * res = new DtEntrenamiento(entr->getenRambla(),entr->getid(),entr->getNombre(),entr->getTurno());
                            resultado = res;
                        }
                        else{
                            Spinning  * entr = dynamic_cast<Spinning *>(clases[j]);
	                    DtSpinning * res = new DtSpinning(entr->getCantBicicletas(),entr->getid(),entr->getNombre(),entr->getTurno());
                            resultado = res;
                        }
                    }    
                        
                return *resultado;
        } 
    
int main()
{
    int opcion = 0;
    
    while(opcion != 7){
        
        cout << "1. Agregar Socio" << endl;
        cout << "2. Agregar Clase" << endl;
        cout << "3. Agregar Inscripcion" << endl;
        cout << "4. Borrar Inscripcion" << endl;
        cout << "5. Imprimir Socios por clase" << endl;
        cout << "6. Imprimir Clase" << endl;
        cout << "7. salir" << endl << endl; 
        
        cout << "Ingrese opcion:";
        cin >> opcion;
        cout << endl << endl;
        
        try{
            if(opcion == 1){
                
                string ci,nombre;
                
                cout << "Ingrese ci:";
                cin >> ci;
                cout << endl;
                
                
                cout << "Ingrese Nombre:";
                cin >> nombre;
                cout << endl;
                
                agregarSocio(ci,nombre);
                
            }
            else if(opcion == 2){
                int tipoclase,id,numeroturno;
                string nombre;
                Turno turno;
                cout << "1. spining" << endl;
                cout << "2. entrenamiento";
                cin >> tipoclase;
                
                cout << "ingrese id";
                cin >> id;

                cout << "ingrese el nombre";
                cin >> nombre;

                cout << "ingrese el turno" << endl;
                cout << "1. ma침ana" << endl;
                cout << "2. tarde" << endl;
                cout << "3. noche";
                cin >> numeroturno;
                if (numeroturno == 1){
                    turno = Manana;
                }else{ if (numeroturno == 2){
                    turno = Tarde;
                    }else turno = Noche;
                }
                if (tipoclase == 1){
                   int bicis;

                   cout << "ingrese cantidad de bicis";
                   cin >> bicis;

                   DtSpinning dtspinning(bicis,id,nombre,turno);
                   agregarClase(dtspinning);
                }
                else{
                    int enrambla;

                    cout << "0. no es en la rambla" << endl;
                    cout << "1. es en la rambla";
                    cin >> enrambla;
                    
                    bool rambla = enrambla == 1;
                    
                    DtEntrenamiento dtentrenamiento(rambla,id,nombre,turno);
                    agregarClase(dtentrenamiento);
                }
            }
            
            else if(opcion == 3){
                string ciSocio;
                int idclase,dia,mes,anio;
                
                cout << "ingrese la cedula del socio";
                cin >> ciSocio;

                cout << "ingrese el ID de la clase";
                cin >> idclase;
                
                cout << "ingrese el dia ";
                cin >> dia;

                cout << "ingrese le mes";
                cin >> mes;

                cout << "ingrese el a침o";
                cin >> anio;

                Fecha f(dia,mes,anio);
                
                agregarInscripcion(ciSocio,idclase,f);
                
            }
            else if(opcion == 4){
                string CI;
                int ID;

                cout << "ingrese la CI del socio";
                cin >> CI;

                cout << "ingrese el ID de la clase";
                cin >> ID;

                borrarInscripcion(CI,ID);
            }
            else if(opcion == 5){
                
                int idClase, cantSocios;
                
                cout << "Ingrese Clase:";
                cin >> idClase;
                cout << endl;
                
                
                cout << "Ingrese CantidadSocios:";
                cin >> cantSocios;
                cout << endl;
                
                DtSocio** socios = obtenerInfoSocioPorClase(idClase,cantSocios);
                
                for(int i=0; i<cantSocios; i++)
                    cout << socios[i]->getCI() << " - " << socios[i]->getNombre() << endl;
                
                delete socios;
                
            }
            else if(opcion == 6){
                int id;
                cout << "ingrese el ID de la clase ";
                cin >> id;
                
                if(dynamic_cast<DtEntrenamiento*> (&obtenerClase(id)) != NULL){
                    DtEntrenamiento * imp = dynamic_cast<DtEntrenamiento*>(&obtenerClase(id));
                    cout << *imp;	
                }
                else{
 		    DtSpinning * imp = dynamic_cast<DtSpinning*>(&obtenerClase(id));
                    cout << *imp;	
                }
            }
            else {
                
                invalid_argument("opcion no valida");
            }
        }catch(invalid_argument &ia){
            
            cout << "Error: " << ia.what() << endl;
            
        }
    }
    
adsfadsfadsfadsfadsfadsfadsf
    return 0;
}
